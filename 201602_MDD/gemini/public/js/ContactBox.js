// File:  ContactBox.js
// Compiles the ContactList & ContactForm
// Loads information from api / server

// Dependencies ********************************
import React from 'react';

// Components / Children ********************************
import ContactsList from './ContactsList';
import ContactForm from './ContactForm';

// Define class "ContactBox" ********************************
// Parent is App
var ContactBox = React.createClass({

    // Set initial state to blank array
    getInitialState: function() {
      return {contacts: []};
    },

    // Invoked once, both on the client and server, 
    // immediately before the initial rendering occurs. 
    componentWillMount: function() {
      this.firebaseRef = new Firebase('https://sweltering-inferno-113.firebaseio.com');
      this.firebaseRef.limitToLast(25).on('value', function(dataSnapshot) {
        var contacts = [];
        dataSnapshot.forEach(function(childSnapshot) {
          var contact = childSnapshot.val();
          contact['.key'] = childSnapshot.key();
          contacts.push(contact);
        }.bind(this));

        // If you call setState within this method, 
        // render() will see the updated state 
        // and will be executed only once 
        // despite the state change.
        this.setState({
          contacts: contacts
        });
      }.bind(this));
    },

    // Invoked immediately before a component is unmounted from the DOM.
    componentWillUnmount: function() {
      this.firebaseRef.off();
    },
    
    onChange: function(e) {
      this.setState({text: e.target.value});
    },

    /*
    removeContact: function(key) {
      var firebaseRef = new Firebase('https://sweltering-inferno-113.firebaseio.com');
      firebaseRef.child(key).remove();
    },
    */

    handleSubmit: function(contact) {
      var contacts = this.state.contacts;

      // Optimistically set an id on the new contact. It will be replaced by an
      // id generated by the server. In a production application you would likely
      // not use Date.now() for this and would have a more robust system in place.
      contact.id = Date.now();
      var newContacts = contacts.concat([contact]);

      console.log(newContacts);
      /*this.setState({contacts: newContacts}); */
      
      this.firebaseRef.push({
        id: contact.id,
        name: contact.name,
        phone: contact.phone
      });
        
    },


    render: function() {
      return (
        <div className="contactBox">
          <h3>Contacts</h3>
          <ContactsList contacts={this.state.contacts} />
          <h3>Contact Form</h3>
          <ContactForm onSubmit={this.handleSubmit} />
        </div>
      );
    }
  });

// Export "ContactBox" ********************************
export default ContactBox;